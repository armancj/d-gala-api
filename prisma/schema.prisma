// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int              @id @default(autoincrement())
  createdAt                 DateTime         @default(now())
  email                     String?          @unique
  phone                     String?          @unique
  username                  String?          @unique
  firstname                 String?
  lastname                  String?
  password                  String
  salt                      String?
  phoneConfirmed            PhoneConfirmed?
  role                      Role             @default(USER)
  status                    UserStatus       @default(ACTIVE)
  posts                     Post[]
  product                   Product[]
  categories                Category[]
  profile                   Profile?
  Review                    Review?
  emailConfirmed            EmailConfirmed?
  deleted                   Boolean          @default(false)
  currentHashedRefreshToken String?
  privateMessages           PrivateMessage[]
  updatedAt                 DateTime?        @updatedAt
}

model EmailConfirmed {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  email        String      @unique
  code         Int         @unique
  codeExpireAt DateTime
  status       EmailStatus @default(REGISTER_SEND_EMAIL)
  user         User        @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId       Int         @unique
  updatedAt    DateTime    @updatedAt
}

model PhoneConfirmed {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  phone        String      @unique
  code         Int         @unique
  codeExpireAt DateTime
  status       EmailStatus @default(REGISTER_SEND_EMAIL)
  user         User        @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId       Int         @unique
  updatedAt    DateTime    @updatedAt
}

model PrivateMessage {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    Int
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id        Int      @id @default(autoincrement())
  bio       String
  address   String?
  user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    Int      @unique
  photo     Photo?
  updatedAt DateTime @updatedAt
}

model Post {
  id         Int                 @id @default(autoincrement())
  createdAt  DateTime            @default(now())
  title      String
  published  Boolean?            @default(false)
  author     User?               @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  authorId   Int?
  categories CategoriesOnPosts[]
  comments   Comment[] // A post can have many comments
  keywords   String[] // A scalar list
  deleted    Boolean             @default(false)
  updatedAt  DateTime            @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String?
  Post      Post?    @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade) // A comment can have one post
  postId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id              Int                 @id @default(autoincrement())
  createdAt       DateTime            @default(now())
  name            String
  generalCategory Boolean             @default(true)
  parent          Category?           @relation("GeneralCategory", fields: [parentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  parentId        Int?
  children        Category[]          @relation("GeneralCategory")
  posts           CategoriesOnPosts[]
  products        Product[]           @relation("ProductCategory")
  createBy        User?               @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId          Int?
  deleted         Boolean             @default(false)
  updatedAt       DateTime            @updatedAt
}

model CategoriesOnPosts {
  id         Int      @id @default(autoincrement())
  post       Post     @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId     Int // relation scalar field (used in the `@relation` attribute above)
  categories Category @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  categoryId Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Product {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String        @unique
  content      String?       @db.Text
  priceCut     Float?        @map("price_cut")
  price        Float         @default(0) @db.DoublePrecision
  slug         String        @unique()
  sizes        String[]      @default([])
  stars        Int           @default(3)
  viewCount    Int           @default(0)
  gender       GenderType
  tags         String[]      @default([])
  stock        Int           @default(0)
  status       ProductStatus @default(IN_SUPPLIER)
  photo        Photo[]
  reviews      Review[]
  reviewsTotal Int           @default(0)
  categories   Category[]    @relation("ProductCategory")
  deleted      Boolean       @default(false)
  user         User?         @relation(fields: [userId], references: [id])
  userId       Int?
  items        OrderItem[]
  colors       String[]      @default([])

  @@index([name, userId])
}

model Order {
  id       Int         @id @default(autoincrement())
  user     String
  items    OrderItem[]
  subtotal Float
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  quantity  Int
  price     Float
  orderId   Int
  productId Int
}

model Review {
  id        String   @id @default(uuid())
  rating    Int      @default(1)
  text      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId Int
  user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    Int      @unique
}

model Photo {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String   @unique
  space     Float
  url       String
  product   Product? @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId Int?
  profile   Profile? @relation(fields: [profileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  profileId Int?     @unique
  updatedAt DateTime @updatedAt

  @@index([productId, profileId])
}

model Logs {
  id            Int      @id @default(autoincrement())
  statusLog     String
  method        String?
  originalUrl   String?
  params        Json?
  statusCode    Int?
  statusMessage String?
  user          Json?
  contentLength Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  SUADMIN
  WORKER
}

enum UserStatus {
  ACTIVE
  DEACTIVE
}

enum EmailStatus {
  REGISTER_SEND_EMAIL
  EMAIL_VALID
  CHANGE_EMAIL
}

enum ProductStatus {
  IN_SUPPLIER
  IN_FALT
  IN_COMPENSE
}

enum GenderType {
  men
  women
  kid
  unisex
}
